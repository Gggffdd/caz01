import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from casino import SlotMachine, check_win
from database import init_db, get_user_balance, update_user_balance

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
COST_PER_SPIN = 10
START_BALANCE = 1000

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    balance = get_user_balance(user.id)
    
    if balance is None:
        balance = START_BALANCE
        update_user_balance(user.id, balance)
    
    await update.message.reply_text(
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/spin - –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã (10 –º–æ–Ω–µ—Ç)\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/addcoins - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        reply_markup=spin_keyboard()
    )

def spin_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å!", callback_data="spin")]])

async def spin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    
    if balance < COST_PER_SPIN:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    new_balance = balance - COST_PER_SPIN
    update_user_balance(user_id, new_balance)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    slot = SlotMachine()
    result = slot.spin()
    win_amount = check_win(result)
    
    if win_amount > 0:
        new_balance += win_amount
        update_user_balance(user_id, new_balance)
        win_msg = f"üéâ –ü–æ–±–µ–¥–∞! +{win_amount} –º–æ–Ω–µ—Ç!"
    else:
        win_msg = "üò¢ –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç–∞
    slot_display = " | ".join(result)
    
    await update.message.reply_text(
        f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: [ {slot_display} ]\n"
        f"{win_msg}\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç",
        reply_markup=spin_keyboard()
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")

async def add_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    update_user_balance(user_id, 1000, increment=True)
    await update.message.reply_text("‚úÖ +1000 –º–æ–Ω–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç!")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "spin":
        await spin(update, context)

def main():
    app = Application.builder().token(os.getenv("TOKEN")).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("spin", spin))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("addcoins", add_coins))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
